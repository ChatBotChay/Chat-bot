from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from database.dao import DAO
from database.engine import async_session_maker
from bot.utils import send_dish_card_to_tech_group
from bot.keyboards.reply import get_keyboard

waiter_router = Router()

class WaiterMenuStates(StatesGroup):
    waiting_for_choice = State()
    waiting_for_category = State()
    waiting_for_dish = State()
    viewing_dish = State()

@waiter_router.message(CommandStart())
async def universal_start(message: Message, state: FSMContext, user):
    if not user:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if user.role == "waiter":
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–¢–µ—Å—Ç"), KeyboardButton(text="–ú–µ–Ω—é")]],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        await state.set_state(WaiterMenuStates.waiting_for_choice)
    elif user.role in ("admin", "superadmin"):
        kb = get_keyboard(
            "üçΩÔ∏è –ë–ª—é–¥–æ",
            "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
            "ü§ù –°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
            "üßë‚Äçü§ù‚Äçüßë –®—Ç–∞—Ç",
            sizes=(2, 2)
        )
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.role}.", reply_markup=kb)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å state –¥–ª—è –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@waiter_router.message(WaiterMenuStates.waiting_for_choice)
async def waiter_choice(message: Message, state: FSMContext, user):
    if message.text.lower() == "–º–µ–Ω—é":
        async with async_session_maker() as session:
            dao = DAO(session)
            categories = await dao.get_categories_by_restaurant(user.restaurant_id)
        if not categories:
            await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=c.name, callback_data=f"waiter_cat_{c.id}") for c in categories]]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
        await state.set_state(WaiterMenuStates.waiting_for_category)
    elif message.text.lower() == "—Ç–µ—Å—Ç":
        await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")

@waiter_router.callback_query(F.data.startswith("waiter_cat_"), WaiterMenuStates.waiting_for_category)
async def waiter_choose_category(call: CallbackQuery, state: FSMContext, user):
    cat_id = int(call.data.split("_")[2])
    await state.update_data(category_id=cat_id)
    async with async_session_maker() as session:
        dao = DAO(session)
        dishes = await dao.get_dishes_by_category(cat_id)
    if not dishes:
        await call.message.edit_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –±–ª—é–¥.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=d.name, callback_data=f"waiter_dish_{d.id}") for d in dishes]] + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="waiter_back_cat")]]
    )
    try:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=kb)
    except Exception:
        await call.message.delete()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=kb)
    await state.set_state(WaiterMenuStates.waiting_for_dish)
    await call.answer()

@waiter_router.callback_query(F.data == "waiter_back_cat", WaiterMenuStates.waiting_for_dish)
async def waiter_back_to_categories(call: CallbackQuery, state: FSMContext, user):
    async with async_session_maker() as session:
        dao = DAO(session)
        categories = await dao.get_categories_by_restaurant(user.restaurant_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=c.name, callback_data=f"waiter_cat_{c.id}") for c in categories]]
    )
    try:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    except Exception:
        await call.message.delete()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await state.set_state(WaiterMenuStates.waiting_for_category)
    await call.answer()

@waiter_router.callback_query(F.data.startswith("waiter_dish_"), WaiterMenuStates.waiting_for_dish)
async def waiter_choose_dish(call: CallbackQuery, state: FSMContext, user):
    dish_id = int(call.data.split("_")[2])
    await state.update_data(dish_id=dish_id, dish_page=0, dish_media="photo")
    async with async_session_maker() as session:
        dao = DAO(session)
        dish = await dao.get_dish_by_id(dish_id)
    if not dish:
        await call.message.edit_text("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    from aiogram.types.input_file import FSInputFile
    from aiogram.types import InputMediaPhoto, InputMediaVideo
    dish_media = "photo"  # –î–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞ –≤—Å–µ–≥–¥–∞ —Ñ–æ—Ç–æ
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="waiter_prev_dish"), InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="waiter_next_dish")],
            [InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", callback_data="waiter_toggle_media")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="waiter_back_dishes")]
        ]
    )
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)
    if dish.composition:
        import re
        raw_ingredients = re.split(r",\s*|\s{2,}", dish.composition)
        ingredients_text = '\n'.join([f"‚Ä¢ {i.strip()}" for i in raw_ingredients if i.strip()])
    else:
        ingredients_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    caption = f"<b>{dish.name} üçΩÔ∏è</b>\n\n<b>–°–æ—Å—Ç–∞–≤:</b>\n{ingredients_text}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{dish.description}"
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ –±–ª—é–¥–∞ –≤—Å–µ–≥–¥–∞ —Ñ–æ—Ç–æ
    if dish.ready_photo_url:
        media = InputMediaPhoto(media=FSInputFile(dish.ready_photo_url), caption=caption, parse_mode="HTML")
        await call.message.edit_media(media=media, reply_markup=kb)
    else:
        await call.message.edit_text(caption, parse_mode="HTML", reply_markup=kb)
    await state.set_state(WaiterMenuStates.viewing_dish)
    await call.answer()

@waiter_router.callback_query(F.data == "waiter_toggle_media", WaiterMenuStates.viewing_dish)
async def waiter_toggle_media(call: CallbackQuery, state: FSMContext, user):
    data = await state.get_data()
    dish_id = data.get("dish_id")
    dish_media = data.get("dish_media", "photo")
    async with async_session_maker() as session:
        dao = DAO(session)
        dish = await dao.get_dish_by_id(dish_id)
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–¥—É–µ—Ç—Å—è
    next_media_text = "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è" if dish_media == "video" else "üé¨ –í–∏–¥–µ–æ"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="waiter_prev_dish"), InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="waiter_next_dish")],
            [InlineKeyboardButton(text=next_media_text, callback_data="waiter_toggle_media")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="waiter_back_dishes")]
        ]
    )
    from aiogram.types.input_file import FSInputFile
    from aiogram.types import InputMediaPhoto, InputMediaVideo
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞ (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)
    if dish.composition:
        import re
        raw_ingredients = re.split(r",\s*|\s{2,}", dish.composition)
        ingredients_text = '\n'.join([f"‚Ä¢ {i.strip()}" for i in raw_ingredients if i.strip()])
    else:
        ingredients_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    caption = f"<b>{dish.name} üçΩÔ∏è</b>\n\n<b>–°–æ—Å—Ç–∞–≤:</b>\n{ingredients_text}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{dish.description}"
    # –î–ª—è –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º caption
    if dish_media == "photo" and dish.video_url:
        media = InputMediaVideo(media=FSInputFile(dish.video_url), caption=caption, parse_mode="HTML")
        await call.message.edit_media(media=media, reply_markup=kb)
        await state.update_data(dish_media="video")
    elif dish_media == "video" and dish.ready_photo_url:
        media = InputMediaPhoto(media=FSInputFile(dish.ready_photo_url), caption=caption, parse_mode="HTML")
        await call.message.edit_media(media=media, reply_markup=kb)
        await state.update_data(dish_media="photo")
    else:
        await call.message.answer("–ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.")
    await call.answer()

@waiter_router.callback_query(F.data == "waiter_back_dishes", WaiterMenuStates.viewing_dish)
async def waiter_back_to_dishes(call: CallbackQuery, state: FSMContext, user):
    data = await state.get_data()
    cat_id = data.get("category_id")
    async with async_session_maker() as session:
        dao = DAO(session)
        dishes = await dao.get_dishes_by_category(cat_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"{d.name} üçΩÔ∏è", callback_data=f"waiter_dish_{d.id}") for d in dishes]] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="waiter_back_cat")]]
    )
    try:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=kb)
    except Exception:
        await call.message.delete()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", reply_markup=kb)
    await state.set_state(WaiterMenuStates.waiting_for_dish)
    await call.answer()
