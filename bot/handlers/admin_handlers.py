import secrets
import tempfile
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from database.dao import DAO
from database.engine import async_session_maker
from bot.keyboards.reply import get_keyboard
from database.invite_token_service import InviteTokenService
from bot.utils import make_video_from_image_and_audio, send_video_to_tech_group
invite_service = InviteTokenService()

admin_router = Router()

admin_kb = get_keyboard(
	"üçΩÔ∏è –ë–ª—é–¥–æ",
	"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
	"ü§ù –°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
	"üßë‚Äçü§ù‚Äçüßë –®—Ç–∞—Ç",
	sizes=(2, 2)
)


class CategoryEditStates(StatesGroup):
	waiting_for_category = State()
	waiting_for_new_name = State()


class DishEditStates(StatesGroup):
	waiting_for_id = State()
	waiting_for_name = State()
	waiting_for_category = State()
	waiting_for_composition = State()
	waiting_for_description = State()
	waiting_for_ingredients_photo = State()
	waiting_for_ready_photo = State()
	waiting_for_audio = State()
	waiting_for_video = State()


class AddDishStates(StatesGroup):
	waiting_for_name = State()
	waiting_for_ingredients = State()
	waiting_for_description = State()
	waiting_for_video = State()
	waiting_for_category = State()


class WaiterRegisterStates(StatesGroup):
	waiting_for_first_name = State()
	waiting_for_last_name = State()


class CategoryCreateStates(StatesGroup):
	waiting_for_name = State()

async def is_user_allowed(tg_id: str, session: AsyncSession) -> bool:
	dao = DAO(session)
	user = await dao.get_user_by_tg_id(tg_id)
	return user is not None and user.role in ("admin", "superadmin")


@admin_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, user):
	args = message.text.split()
	if len(args) > 1:
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É
		token = args[1]
		restaurant_id = await invite_service.get_restaurant_id(token)
		print(f"–ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: {token}, restaurant_id: {restaurant_id}")
		if restaurant_id:
			await state.update_data(invite_token=token, restaurant_id=restaurant_id)
			await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
			await state.set_state(WaiterRegisterStates.waiting_for_first_name)
			return
		await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.")
		return
	if not user or user.role not in ("admin", "superadmin", "waiter"):
		await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		return

	kb = admin_kb if user.role == "admin" else None
	await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.role}.", reply_markup=kb)


############_______FSM: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é_____############################
@admin_router.message(WaiterRegisterStates.waiting_for_first_name)
async def waiter_first_name(message: Message, state: FSMContext):
	await state.update_data(first_name=message.text)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
	await state.set_state(WaiterRegisterStates.waiting_for_last_name)


@admin_router.message(WaiterRegisterStates.waiting_for_last_name)
async def waiter_last_name(message: Message, state: FSMContext):

	data = await state.get_data()

	rest_id = data.get("restaurant_id")
	if not rest_id or rest_id == "None":
		await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		await state.clear()
		return

	async with async_session_maker() as session:
		dao = DAO(session)
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç tg_id
		user = await dao.get_user_by_tg_id(str(message.from_user.id))
		if user:
			await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
			await state.clear()
			return
		# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
		await dao.create_user(
			first_name=data["first_name"],
			last_name=message.text,
			tg_username=message.from_user.username,
			tg_id=str(message.from_user.id),
			role="waiter",
			restaurant_id=int(rest_id)
		)

	await invite_service.delete_token(data['invite_token'])
	await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
	await state.clear()


@admin_router.message(F.text.lower() == "üçΩÔ∏è –±–ª—é–¥–æ")
async def show_dishes_menu(message: Message, user):
	if not user or user.role != "admin":
		await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–ª—é–¥–∞–º–∏.")
		return
	async with async_session_maker() as session:
		dao = DAO(session)
		dishes = await dao.get_dishes_by_restaurant(user.restaurant_id)
	kb = InlineKeyboardMarkup(
		inline_keyboard=[
			[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="add_dish")],
			*[[
				InlineKeyboardButton(text=f"üëÅÔ∏è {d.name}", callback_data=f"viewdish_{d.id}"),
				InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"editdish_{d.id}"),
				InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"deldish_{d.id}")
			] for d in dishes]
		]
	)
	await message.answer("–ú–µ–Ω—é –±–ª—é–¥:", reply_markup=kb)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –±–ª—é–¥–∞ ---
@admin_router.callback_query(F.data.startswith("viewdish_"))
async def admin_view_dish(call: CallbackQuery, user):
	dish_id = int(call.data.split("_")[1])
	async with async_session_maker() as session:
		dao = DAO(session)
		dish = await dao.get_dish_by_id(dish_id)
	if not dish or dish.restaurant_id != user.restaurant_id:
		await call.message.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
		await call.answer()
		return
	# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –±–ª—é–¥–∞
	from aiogram.types.input_file import FSInputFile
	from aiogram.types import InputMediaPhoto
	import re
	if dish.composition:
		raw_ingredients = re.split(r",\s*|\s{2,}", dish.composition)
		ingredients_text = '\n'.join([f"‚Ä¢ {i.strip()}" for i in raw_ingredients if i.strip()])
	else:
		ingredients_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
	caption = f"<b>{dish.name} üçΩÔ∏è</b>\n\n<b>–°–æ—Å—Ç–∞–≤:</b>\n{ingredients_text}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{dish.description}"
	if dish.ready_photo_url:
		try:
			media = InputMediaPhoto(media=FSInputFile(dish.ready_photo_url), caption=caption, parse_mode="HTML")
			await call.message.answer_photo(photo=FSInputFile(dish.ready_photo_url), caption=caption, parse_mode="HTML")
		except Exception:
			await call.message.answer(caption, parse_mode="HTML")
	else:
		await call.message.answer(caption, parse_mode="HTML")
	await call.answer()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ ---
@admin_router.callback_query(F.data.startswith("deldish_"))
async def admin_delete_dish(call: CallbackQuery, user):
	dish_id = int(call.data.split("_")[1])
	async with async_session_maker() as session:
		dao = DAO(session)
		dish = await dao.get_dish_by_id(dish_id)
		if not dish or dish.restaurant_id != user.restaurant_id:
			await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
			return
		await session.delete(dish)
		await session.commit()
	await call.message.answer("–ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ.")
	await call.answer()

@admin_router.message(F.text.lower() == "üìÇ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories_menu(message: Message, user):
	if not user or user.role != "admin":
		await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.")
		return
	async with async_session_maker() as session:
		dao = DAO(session)
		categories = await dao.get_categories_by_restaurant(user.restaurant_id)
	kb = InlineKeyboardMarkup(
		inline_keyboard=[
			[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
			*[[
				InlineKeyboardButton(text=f"‚úèÔ∏è {c.name}", callback_data=f"editcat_{c.id}"),
				InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"delcat_{c.id}")
			] for c in categories]
		]
	)
	await message.answer("–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=kb)


# ------------------------------ –†–ê–ë–û–¢–ê –° –ú–ï–ù–Æ --------------------------------------------------------------------------------------

@admin_router.message(F.text.lower() == "üìã –º–µ–Ω—é")
async def show_categories(message: Message, user):
	if not user or user.role != "admin":
		await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
		return
	async with async_session_maker() as session:
		dao = DAO(session)
		categories = await dao.get_categories_by_restaurant(user.restaurant_id)
	if not categories:
		await message.answer("–í –≤–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
		return
	for c in categories:
		kb = InlineKeyboardMarkup(inline_keyboard=[
			[InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delcat_{c.id}")]
		])
		await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: üìÇ {c.name} (id: {c.id})", reply_markup=kb)


# ----------------------------- –°–û–ó–î–ê–ù–ò–ï/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ---------------------------------------------------------------





# --- –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò ---
@admin_router.message(F.text.lower() == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def category_edit_start(message: Message, state: FSMContext, user):
	if not user or user.role != "admin":
		await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
		return
	async with async_session_maker() as session:
		dao = DAO(session)
		categories = await dao.get_categories_by_restaurant(user.restaurant_id)
	if not categories:
		await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		return
	kb = InlineKeyboardMarkup(
		inline_keyboard=[[InlineKeyboardButton(text=f"üìÇ {c.name}", callback_data=f"editcat_{c.id}")] for c in categories]
	)
	await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
	await state.set_state(CategoryEditStates.waiting_for_category)

@admin_router.message(CategoryCreateStates.waiting_for_name)
async def category_create_name(message: Message, state: FSMContext, user):
	async with async_session_maker() as session:
		dao = DAO(session)
		category = await dao.create_category(message.text, user.restaurant_id)
	await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
	await state.clear()


@admin_router.callback_query(F.data.startswith("delcat_"))
async def delete_category_callback(call: CallbackQuery, *, user):
	if not user or user.role != "admin":
		await call.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
		return
	cat_id = int(call.data.split("_")[1])
	async with async_session_maker() as session:
		dao = DAO(session)
		categories = await dao.get_categories_by_restaurant(user.restaurant_id)
		category = next((c for c in categories if c.id == cat_id), None)
		if not category:
			await call.answer("–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
			return
		await session.delete(category)
		await session.commit()
	await call.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.")



@admin_router.callback_query(F.data.startswith("editcat_"), CategoryEditStates.waiting_for_category)
async def category_edit_choose(call: CallbackQuery, state: FSMContext, *, user):
    cat_id = int(call.data.split("_")[1])
    await state.update_data(edit_id=cat_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CategoryEditStates.waiting_for_new_name)
    await call.answer()

@admin_router.message(CategoryEditStates.waiting_for_new_name)
async def category_edit_new_name(message: Message, state: FSMContext, user):
	data = await state.get_data()
	async with async_session_maker() as session:
		dao = DAO(session)
		category = await dao.get_category_by_id(data["edit_id"])
		if category and category.restaurant_id == user.restaurant_id:
			category.name = message.text
			await session.commit()
			await session.refresh(category)
			await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {category.name}")
		else:
			await message.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
	await state.clear()
# --------------------- –°–û–ó–î–ê–ù–ò–ï –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ë–õ–Æ–î–ê ---------------------------------------------------------------------------


# --- –°–û–ó–î–ê–ù–ò–ï –ë–õ–Æ–î–ê ---

# --- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ë–õ–Æ–î–ê ---
@admin_router.message(F.text.lower() == "üçΩÔ∏è –±–ª—é–¥–æ")
async def dish_edit_start(message: Message, state: FSMContext, user):
	if not user or user.role != "admin":
		await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–∞.")
		return
	async with async_session_maker() as session:
		dao = DAO(session)
		dishes = await dao.get_dishes_by_restaurant(user.restaurant_id)
	if not dishes:
		await message.answer("–ù–µ—Ç –±–ª—é–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		return
	kb = InlineKeyboardMarkup(
		inline_keyboard=[[InlineKeyboardButton(text=f"üçΩÔ∏è {d.name}", callback_data=f"editdish_{d.id}")] for d in dishes]
	)
	await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
	await state.set_state(DishEditStates.waiting_for_id)

@admin_router.callback_query(F.data.startswith("editdish_"), DishEditStates.waiting_for_id)
async def dish_edit_choose(call: CallbackQuery, state: FSMContext, *, user):
	dish_id = int(call.data.split("_")[1])
	await state.update_data(edit_id=dish_id)
	async with async_session_maker() as session:
		dao = DAO(session)
		dish = await dao.get_dish_by_id(dish_id)
	if not dish or dish.restaurant_id != user.restaurant_id:
		await call.message.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
		await state.clear()
		await call.answer()
		return
	await call.message.answer(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {dish.name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
	await state.set_state(DishEditStates.waiting_for_name)
	await call.answer()


@admin_router.message(DishEditStates.waiting_for_name)
async def dish_edit_name(message: Message, state: FSMContext, user):
	data = await state.get_data()
	await state.update_data(name=message.text)
	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
	async with async_session_maker() as session:
		dao = DAO(session)
		categories = await dao.get_categories_by_restaurant(user.restaurant_id)
	if not categories:
		await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é!")
		await state.clear()
		return
	kb = InlineKeyboardMarkup(
		inline_keyboard=[
			[InlineKeyboardButton(text=f"üìÇ {c.name}", callback_data=f"choosecat_{c.id}") for c in categories]
		]
	)
	await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–ª—é–¥–∞:", reply_markup=kb)
	await state.set_state(DishEditStates.waiting_for_category)



# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
@admin_router.callback_query(F.data.startswith("choosecat_"), DishEditStates.waiting_for_category)
async def dish_choose_category(call: CallbackQuery, state: FSMContext):
    cat_id = int(call.data.split("_")[1])
    await state.update_data(category_id=cat_id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_dish")]
        ]
    )
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å, –º—è—Å–æ, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü'):",
        reply_markup=kb
    )
    await state.set_state(DishEditStates.waiting_for_composition)
    await call.answer()


@admin_router.callback_query(F.data == "cancel_dish", DishEditStates.waiting_for_composition)
async def cancel_dish_creation(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()


@admin_router.message(DishEditStates.waiting_for_composition)
async def dish_edit_composition(message: Message, state: FSMContext):
	await state.update_data(composition=message.text)
	await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞:")
	await state.set_state(DishEditStates.waiting_for_description)


@admin_router.message(DishEditStates.waiting_for_description)
async def dish_edit_description(message: Message, state: FSMContext):
	await state.update_data(description=message.text)
	await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –±–ª—é–¥–∞:")
	await state.set_state(DishEditStates.waiting_for_ingredients_photo)


@admin_router.message(DishEditStates.waiting_for_video)
async def dish_edit_video(message: Message, state: FSMContext, user):
	data = await state.get_data()
	video_url = None
	if message.video:
		video_url = message.video.file_id
	elif message.text and message.text.lower() == "–Ω–µ—Ç":
		video_url = None
	else:
		await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'.")
		return
	async with async_session_maker() as session:
		dao = DAO(session)
		if "edit_id" in data:
			dish = await dao.get_dish_by_id(data["edit_id"])
			if dish and dish.restaurant_id == user.restaurant_id:
				dish.name = data["name"]
				dish.category_id = data["category_id"]
				dish.composition = data["composition"]
				dish.description = data["description"]
				dish.video_url = video_url
				await session.commit()
				await message.answer(f"–ë–ª—é–¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {dish.name}")
			else:
				await message.answer("–û—à–∏–±–∫–∞: –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
		else:
			await dao.create_dish(
				name=data["name"],
				category_id=data["category_id"],
				restaurant_id=user.restaurant_id,
				composition=data["composition"],
				description=data["description"],
				video_url=video_url
			)
			await message.answer(f"–ë–ª—é–¥–æ '{data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
	await state.clear()

	# ----------- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ –∏ –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—Ö. –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è file_id -----------


@admin_router.message(DishEditStates.waiting_for_ingredients_photo)
async def dish_edit_ingredients_photo(message: Message, state: FSMContext):
	if not message.photo:
		await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –±–ª—é–¥–∞.")
		return
	photo = message.photo[-1]
	file_id = photo.file_id
	bot = message.bot
	file = await bot.get_file(file_id)
	with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as f:
		await bot.download(file, f)
		await state.update_data(ingredients_photo_path=f.name)
	await message.answer("–§–æ—Ç–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞:")
	await state.set_state(DishEditStates.waiting_for_ready_photo)

@admin_router.message(DishEditStates.waiting_for_ready_photo)
async def dish_edit_ready_photo(message: Message, state: FSMContext):
	if not message.photo:
		await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞.")
		return
	photo = message.photo[-1]
	file_id = photo.file_id
	bot = message.bot
	file = await bot.get_file(file_id)
	with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as f:
		await bot.download(file, f)
		await state.update_data(ready_photo_path=f.name)
	await message.answer("–§–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3):")
	await state.set_state(DishEditStates.waiting_for_audio)

@admin_router.message(DishEditStates.waiting_for_audio)
async def dish_edit_audio(message: Message, state: FSMContext, user):
	audio = message.audio or message.document
	if not audio:
		await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (mp3).")
		return
	file_id = audio.file_id
	bot = message.bot
	file = await bot.get_file(file_id)
	with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as f:
		await bot.download(file, f)
		await state.update_data(audio_path=f.name)
	await message.answer("–ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ...")
	data = await state.get_data()
	# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
	with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as vf:
		make_video_from_image_and_audio(data["ingredients_photo_path"], data["audio_path"], vf.name)
		video_path = vf.name
	# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –±–ª—é–¥–∞ (—Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ–≥–æ –±–ª—é–¥–∞)
	dish_card = {
		"name": data.get("name", "–ë–ª—é–¥–æ"),
		"description": data.get("description", ""),
		"ingredients": data.get("composition", ""),
		"photo_path": data.get("ready_photo_path"),
		"video_path": video_path
	}
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª—é–¥–æ –≤ –±–∞–∑—É
	async with async_session_maker() as session:
		dao = DAO(session)
		await dao.create_dish(
			name=data.get("name", "–ë–ª—é–¥–æ"),
			category_id=data.get("category_id"),
			restaurant_id=user.restaurant_id,
			composition=data.get("composition", ""),
			description=data.get("description", ""),
			video_url=video_path,
			ingredients_photo_url=data.get("ingredients_photo_path"),
			ready_photo_url=data.get("ready_photo_path")
		)
	from bot.utils import send_dish_card_to_tech_group
	await send_dish_card_to_tech_group(message.bot, dish_card)
	await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ –±–ª—é–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
	await state.clear()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ inline ---
@admin_router.callback_query(F.data == "add_category")
async def add_category_inline(call: CallbackQuery, state: FSMContext, *, user):
	await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
	await state.set_state(CategoryCreateStates.waiting_for_name)
	await call.answer()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ inline ---
@admin_router.callback_query(F.data == "add_dish")
async def add_dish_inline(call: CallbackQuery, state: FSMContext, *, user):
	await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:")
	await state.set_state(DishEditStates.waiting_for_name)
	await call.answer()

@admin_router.message(F.text.lower() == "ü§ù —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ")
async def invite_waiter_button(message: Message, user):
	if not user or user.role != "admin":
		await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.")
		return
	token = secrets.token_urlsafe(16)
	await invite_service.create_token(token, user.restaurant_id, ttl=900)
	bot_username = (await message.bot.me()).username
	invite_link = f"https://t.me/{bot_username}?start={token}"
	print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_link}")
	kb = InlineKeyboardMarkup(inline_keyboard=[
		[InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞", url=invite_link)]
	])
	await message.answer(
		"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç):",
		reply_markup=kb
	)

@admin_router.message(F.text.lower() == "üßë‚Äçü§ù‚Äçüßë —à—Ç–∞—Ç")
async def show_waiters(message: Message, user):
    if not user or user.role != "admin":
        await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.")
        return
    async with async_session_maker() as session:
        dao = DAO(session)
        waiters = await dao.get_users_by_role("waiter")
        waiters = [w for w in waiters if w.restaurant_id == user.restaurant_id]
    if not waiters:
        await message.answer("–í –≤–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤.")
        return
    for w in waiters:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delwaiter_{w.id}")]
        ])
        await message.answer(f"{w.first_name} {w.last_name} (@{w.tg_username or '-'}), id: {w.id}", reply_markup=kb)